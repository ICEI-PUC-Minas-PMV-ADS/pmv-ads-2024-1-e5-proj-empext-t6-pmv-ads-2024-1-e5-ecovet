// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DbAdapter.Migrations
{
    [DbContext(typeof(EcoVetContext))]
    [Migration("20240403215258_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entidade.Candidatura", b =>
                {
                    b.Property<int>("IDCandidatura")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDCandidatura"), 1L, 1);

                    b.Property<DateTime>("DataDaCandidatura")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProfissionalVeterinarioIDProfissional")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VagaIDVaga")
                        .HasColumnType("int");

                    b.HasKey("IDCandidatura");

                    b.HasIndex("ProfissionalVeterinarioIDProfissional");

                    b.HasIndex("VagaIDVaga");

                    b.ToTable("Candidaturas");
                });

            modelBuilder.Entity("Domain.Entidade.ClinicaVeterinaria", b =>
                {
                    b.Property<int>("IDClinica")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDClinica"), 1L, 1);

                    b.Property<string>("DescricaoDosServicos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDClinica");

                    b.ToTable("ClinicasVeterinarias");
                });

            modelBuilder.Entity("Domain.Entidade.ProfissionalVeterinario", b =>
                {
                    b.Property<int>("IDProfissional")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDProfissional"), 1L, 1);

                    b.Property<string>("Disponibilidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Especialidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Localizacao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDProfissional");

                    b.ToTable("ProfissionaisVeterinarios");
                });

            modelBuilder.Entity("Domain.Entidade.Vaga", b =>
                {
                    b.Property<int>("IDVaga")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDVaga"), 1L, 1);

                    b.Property<int>("ClinicaVeterinariaIDClinica")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PeriodoDeDisponibilidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Requisitos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDVaga");

                    b.HasIndex("ClinicaVeterinariaIDClinica");

                    b.ToTable("Vagas");
                });

            modelBuilder.Entity("Domain.Entidade.Candidatura", b =>
                {
                    b.HasOne("Domain.Entidade.ProfissionalVeterinario", "ProfissionalVeterinario")
                        .WithMany()
                        .HasForeignKey("ProfissionalVeterinarioIDProfissional")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entidade.Vaga", "Vaga")
                        .WithMany()
                        .HasForeignKey("VagaIDVaga")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProfissionalVeterinario");

                    b.Navigation("Vaga");
                });

            modelBuilder.Entity("Domain.Entidade.Vaga", b =>
                {
                    b.HasOne("Domain.Entidade.ClinicaVeterinaria", "ClinicaVeterinaria")
                        .WithMany()
                        .HasForeignKey("ClinicaVeterinariaIDClinica")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClinicaVeterinaria");
                });
#pragma warning restore 612, 618
        }
    }
}
